# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FrenchAddress
                                 A QGIS plugin
 Recherche et localisation d'adresse française.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-20
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Guillaume DELPLANQUE
        email                : delpro.guillaume@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QApplication
from PyQt5.QtCore import QTime
from .modules.point_tool import PointTool
from .modules.coordinates import Coordinates
from .modules.address import Address
from .modules.message_handler import MessageHandler
from .resources import *

from .french_address_dockwidget import FrenchAddressDockWidget
import os.path


class FrenchAddress:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas = self.iface.mapCanvas()

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FrenchAddress_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Adresse France')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'FrenchAddress')
        self.toolbar.setObjectName(u'FrenchAddress')

        #print "** INITIALIZING FrenchAddress"
        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FrenchAddress', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar."""

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/french_address/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Adresse France'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        QApplication.restoreOverrideCursor()

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD FrenchAddress"
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Adresse France'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def clear(self):
        """Permit to clean the differents items from the GUI"""

        self.dockwidget.le_input_address.clear()
        self.dockwidget.lv_address_result.clear()
        self.dockwidget.pte_logs_event.clear()

    def click_check_box(self, state):
        """The function manage the event from the check box"""

        if state == QtCore.Qt.Checked:
            QApplication.setOverrideCursor(Qt.CrossCursor)
            tool = PointTool(self.canvas, self.dockwidget)
            self.dockwidget.pb_locate_search.setEnabled(False)
        else:
            QApplication.restoreOverrideCursor()
            tool = self.active_tool
            self.dockwidget.pb_locate_search.setEnabled(True)

        self.iface.mapCanvas().setMapTool(tool)

    def address_processing(self):
        """Launch the address processing"""
        address_entry = self.dockwidget.le_input_address.text()
        
        if self.address.test_address_entry(address_entry):
            self.address.format_address_entry()
            if self.address.test_obligatory_field():
                pass

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True
            if self.dockwidget == None:
                self.active_tool = self.iface.mapCanvas().mapTool()
                self.dockwidget = FrenchAddressDockWidget()
                self.coord = Coordinates(self.dockwidget)
                self.address = Address(self.dockwidget)
                self.handler_message = MessageHandler(self.dockwidget)
                self.dockwidget.cb_clic_map.stateChanged.connect(self.click_check_box)
                self.dockwidget.pb_locate_search.clicked.connect(self.address_processing)

            self.clear()
            self.handler_message.send_logs_messages('ok', 'Le plugin est prêt ! \
            \n-------------------------------------')

            items_list = ["Item 1", "Item 2", "Item 3"]
            self.dockwidget.lv_address_result.addItems(items_list)
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
